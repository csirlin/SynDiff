Base commands from the github:
python3 train.py --image_size 256 --exp exp_syndiff --num_channels 2 --num_channels_dae 64 --ch_mult 1 1 2 2 4 4 --num_timesteps 4 --num_res_blocks 2 --batch_size 1 --contrast1 mri --contrast2 ct --num_epoch 500 --ngf 64 --embedding_type positional --use_ema --ema_decay 0.999 --r1_gamma 1. --z_emb_dim 256 --lr_d 1e-4 --lr_g 1.6e-4 --lazy_reg 10 --num_process_per_node 2 --save_content --local_rank 1 --input_path /media/hdd6/colter/synthrad_h5_sparse --output_path /media/hdd6/colter/synthrad_out
python test.py --image_size 256 --exp exp_syndiff --num_channels 2 --num_channels_dae 64 --ch_mult 1 1 2 2 4 4 --num_timesteps 4 --num_res_blocks 2 --batch_size 1 --embedding_type positional  --z_emb_dim 256 --contrast1 T1  --contrast2 T2 --which_epoch 50 --gpu_chose 0 --input_path /input/path/for/data --output_path /output/for/results

Notes: 

The synthrad scans have the shape (x, y, z). 
In this context, 
- the first number (x) is left-right (0 is right, max is left)
- the second number (y) is front-back (0 is front, max is back)
- the third number (z) is top-bottom (0 is bottom, max is top)
So an image with initial shape (x0, y0, z0) must be put onto a (256, 256, z0) canvas

Syndiff expects images of shape (z, 1, x, y).
So we want (x, y, z) -> (z, 1, 256 (x), 256 (y))